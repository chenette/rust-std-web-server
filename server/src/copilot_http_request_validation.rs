// ENTIRE FILE GENERATED BY COPILOT IN AN ATTEMPT TO SHOW HOW TO PARSE AN HTTP REQUEST WITHOUT USING EXTERNAL CRATES AND VALIDATING THE DATA AS WE GET IT

use std::collections::HashMap;

#[derive(Debug)]
pub enum ParseError {
    InvalidUtf8,
    InvalidRequestLine,
    InvalidHeader,
}

pub fn parse_http_request(buffer: Vec<u8>) -> Result<(String, String, String, HashMap<String, String>, String), ParseError> {
    // Convert Vec<u8> to String
    let request = String::from_utf8(buffer).map_err(|_| ParseError::InvalidUtf8)?;

    // Split the request into lines
    let mut lines = request.lines();

    // Parse the request line
    let request_line = lines.next().ok_or(ParseError::InvalidRequestLine)?;
    let mut request_line_parts = request_line.split_whitespace();
    let method = request_line_parts.next().ok_or(ParseError::InvalidRequestLine)?.to_string();
    let uri = request_line_parts.next().ok_or(ParseError::InvalidRequestLine)?.to_string();
    let version = request_line_parts.next().ok_or(ParseError::InvalidRequestLine)?.to_string();

    // Validate the HTTP version
    if !version.starts_with("HTTP/") {
        return Err(ParseError::InvalidRequestLine);
    }

    // Parse headers
    let mut headers = HashMap::new();
    for line in lines.by_ref() {
        if line.is_empty() {
            break;
        }
        if let Some((key, value)) = line.split_once(": ") {
            headers.insert(key.to_string(), value.to_string());
        } else {
            return Err(ParseError::InvalidHeader);
        }
    }

    // The remaining part is the body
    let body = lines.collect::<Vec<&str>>().join("\n");

    Ok((method, uri, version, headers, body))
}

fn main() {
    // Example raw HTTP request data
    let raw_data = b"GET /index.html HTTP/1.1\r\nHost: www.example.com\r\nUser-Agent: curl/7.64.1\r\nAccept: */*\r\n\r\n".to_vec();

    match parse_http_request(raw_data) {
        Ok((method, uri, version, headers, body)) => {
            println!("Method: {}", method);
            println!("URI: {}", uri);
            println!("Version: {}", version);
            println!("Headers: {:?}", headers);
            println!("Body: {}", body);
        }
        Err(e) => {
            println!("Failed to parse HTTP request: {:?}", e);
        }
    }
}